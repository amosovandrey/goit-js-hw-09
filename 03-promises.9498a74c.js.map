{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,QAEhCC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBAEpCI,EAAa,KAEjBN,EAAOO,iBAAiB,UAExB,SAAkBC,GAChBA,EAAEC,iBAEF,IAAMC,EAAQP,EAAQQ,MAChBC,EAAOR,EAAOO,MACdE,EAASR,EAASM,MAEpBG,EAAkB,EAElBC,EAAW,EAEXT,GACFU,cAAcV,GAGhBA,EAAaW,aAAY,WAwB3B,IAAuBC,EAAUC,GAAVD,EAvBnBH,GAAY,EAuBiBI,EArBLT,EAsBnB,IAAIU,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,KA3BlBM,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MACjBQ,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAGjDY,OAAM,SAAAL,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MAClBQ,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,KAIjDL,GAAmB,IAEID,GACrBG,cAAcV,E,GAGfM,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('form');\n\nconst delayEl = document.querySelector('input[name=\"delay\"]');\nconst stepEl = document.querySelector('input[name=\"step\"]');\nconst amountEl = document.querySelector('input[name=\"amount\"]');\n\nlet intervalID = null;\n\nformEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const delay = delayEl.value;\n  const step = stepEl.value;\n  const amount = amountEl.value;\n\n  let createdPromises = 0;\n\n  let position = 0;\n\n  if (intervalID) {\n    clearInterval(intervalID);\n  }\n\n  intervalID = setInterval(() => {\n    position += 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    createdPromises += 1;\n\n    if (createdPromises >= amount) {\n      clearInterval(intervalID);\n      return;\n    }\n  }, step);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$intervalID","addEventListener","e","preventDefault","delay1","value","step","amount","createdPromises","position1","clearInterval","setInterval","position","delay","Promise","resolve","reject","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.9498a74c.js.map"}